# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface BaseResponse {
  message: String!
  statusCode: HttpCode!
}

input CreateRoomInput {
  maxPlayers: Float!
  name: String!
}

input CreateUserInput {
  """Password"""
  password: String!
  username: String!
}

type ErrorOutput implements BaseResponse {
  errors: JSON!
  message: String!
  statusCode: HttpCode!
}

input FilterRoomInput {
  max: Float!
}

input FiltersUserInput {
  username: String!
}

enum HttpCode {
  ACCEPTED
  AMBIGUOUS
  BAD_GATEWAY
  BAD_REQUEST
  CONFLICT
  CONTINUE
  CREATED
  EARLYHINTS
  EXPECTATION_FAILED
  FAILED_DEPENDENCY
  FORBIDDEN
  FOUND
  GATEWAY_TIMEOUT
  GONE
  HTTP_VERSION_NOT_SUPPORTED
  INTERNAL_SERVER_ERROR
  I_AM_A_TEAPOT
  LENGTH_REQUIRED
  METHOD_NOT_ALLOWED
  MISDIRECTED
  MOVED_PERMANENTLY
  NON_AUTHORITATIVE_INFORMATION
  NOT_ACCEPTABLE
  NOT_FOUND
  NOT_IMPLEMENTED
  NOT_MODIFIED
  NO_CONTENT
  OK
  PARTIAL_CONTENT
  PAYLOAD_TOO_LARGE
  PAYMENT_REQUIRED
  PERMANENT_REDIRECT
  PRECONDITION_FAILED
  PRECONDITION_REQUIRED
  PROCESSING
  PROXY_AUTHENTICATION_REQUIRED
  REQUESTED_RANGE_NOT_SATISFIABLE
  REQUEST_TIMEOUT
  RESET_CONTENT
  SEE_OTHER
  SERVICE_UNAVAILABLE
  SWITCHING_PROTOCOLS
  TEMPORARY_REDIRECT
  TOO_MANY_REQUESTS
  UNAUTHORIZED
  UNPROCESSABLE_ENTITY
  UNSUPPORTED_MEDIA_TYPE
  URI_TOO_LONG
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginUserInput {
  """Password"""
  password: String!
  username: String!
}

type Me {
  id: ID!
  username: String!
}

type Me_Single implements BaseResponse {
  data: Me!
  message: String!
  statusCode: HttpCode!
}

type Mutation {
  createRoom(input: CreateRoomInput!): ResultUnion_Room_Mutation!
  createUser(input: CreateUserInput!): ResultUnion_User_Mutation!
  login(input: LoginUserInput!): ResultUnion_UserToken_Mutation!
}

type PaginationData {
  cursorLeft: Float
  cursorRight: Float
  page: Float!
  pageSize: Float!
  total: Float!
}

input PaginationInput {
  page: Float! = 1
  pageSize: Float! = 10
}

type Query {
  me: ResultUnion_Me_Single!
  rooms(filter: FilterRoomInput, pagination: PaginationInput): ResultUnion_Room_List!
  users(filter: FiltersUserInput, pagination: PaginationInput): ResultUnion_User_List!
}

union ResultUnion_Me_Single = ErrorOutput | Me_Single

union ResultUnion_Room_List = ErrorOutput | Room_List

union ResultUnion_Room_Mutation = ErrorOutput | Room_Mutation

union ResultUnion_UserToken_Mutation = ErrorOutput | UserToken_Mutation

union ResultUnion_User_List = ErrorOutput | User_List

union ResultUnion_User_Mutation = ErrorOutput | User_Mutation

type Room {
  id: ID!
}

type Room_List implements BaseResponse {
  data: [Room!]!
  message: String!
  pagination: PaginationData!
  statusCode: HttpCode!
}

type Room_Mutation implements BaseResponse {
  data: Room!
  message: String!
  statusCode: HttpCode!
}

type User {
  email: String!
  id: ID!
  username: String!
}

type UserToken {
  token: String!
}

type UserToken_Mutation implements BaseResponse {
  data: UserToken!
  message: String!
  statusCode: HttpCode!
}

type User_List implements BaseResponse {
  data: [User!]!
  message: String!
  pagination: PaginationData!
  statusCode: HttpCode!
}

type User_Mutation implements BaseResponse {
  data: User!
  message: String!
  statusCode: HttpCode!
}