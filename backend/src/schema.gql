# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface BaseResponse {
  message: String!
  statusCode: HttpCode!
}

input CreateGameInput {
  roomId: ID!
}

input CreateRoomInput {
  name: String!
  rolesConfig: [ID!]!
  type: RoomType!
  werewolfQuantity: Float!
}

input CreateUserInput {
  """Password"""
  password: String!
  username: String!
}

type ErrorOutput implements BaseResponse {
  errors: JSON!
  message: String!
  statusCode: HttpCode!
}

input FilterRoomInput {
  max: Float!
}

input FiltersUserInput {
  username: String!
}

type GameModel {
  id: ID!
  players: [GamePlayerModel!]!
  roomId: Float!
  status: GameStatus!
}

type GameModel_Mutation implements BaseResponse {
  data: GameModel!
  message: String!
  statusCode: HttpCode!
}

type GamePlayerModel {
  id: ID!
  role: RoleModel
  status: GamePlayerStatus!
  virtual: String
}

enum GamePlayerStatus {
  alive
  dead
}

enum GameStatus {
  end
  playing
  waiting
}

enum HttpCode {
  ACCEPTED
  AMBIGUOUS
  BAD_GATEWAY
  BAD_REQUEST
  CONFLICT
  CONTINUE
  CREATED
  EARLYHINTS
  EXPECTATION_FAILED
  FAILED_DEPENDENCY
  FORBIDDEN
  FOUND
  GATEWAY_TIMEOUT
  GONE
  HTTP_VERSION_NOT_SUPPORTED
  INTERNAL_SERVER_ERROR
  I_AM_A_TEAPOT
  LENGTH_REQUIRED
  METHOD_NOT_ALLOWED
  MISDIRECTED
  MOVED_PERMANENTLY
  NON_AUTHORITATIVE_INFORMATION
  NOT_ACCEPTABLE
  NOT_FOUND
  NOT_IMPLEMENTED
  NOT_MODIFIED
  NO_CONTENT
  OK
  PARTIAL_CONTENT
  PAYLOAD_TOO_LARGE
  PAYMENT_REQUIRED
  PERMANENT_REDIRECT
  PRECONDITION_FAILED
  PRECONDITION_REQUIRED
  PROCESSING
  PROXY_AUTHENTICATION_REQUIRED
  REQUESTED_RANGE_NOT_SATISFIABLE
  REQUEST_TIMEOUT
  RESET_CONTENT
  SEE_OTHER
  SERVICE_UNAVAILABLE
  SWITCHING_PROTOCOLS
  TEMPORARY_REDIRECT
  TOO_MANY_REQUESTS
  UNAUTHORIZED
  UNPROCESSABLE_ENTITY
  UNSUPPORTED_MEDIA_TYPE
  URI_TOO_LONG
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginUserInput {
  """Password"""
  password: String!
  username: String!
}

type Me {
  id: ID!
  username: String!
}

type Me_Single implements BaseResponse {
  data: Me!
  message: String!
  statusCode: HttpCode!
}

type Mutation {
  createGame(input: CreateGameInput!): ResultUnion_GameModel_Mutation!
  createRoom(input: CreateRoomInput!): ResultUnion_RoomModel_Mutation!
  createUser(input: CreateUserInput!): ResultUnion_UserModel_Mutation!
  login(input: LoginUserInput!): ResultUnion_UserToken_Mutation!
  updateRoom(input: UpdateRoomInput!): ResultUnion_RoomModel_Mutation!
  updateRoomPlayer(input: UpdateRoomPlayerInput!): ResultUnion_RoomPlayerModel_List_Mutation!
}

type PaginationData {
  cursorLeft: Float
  cursorRight: Float
  page: Float!
  pageSize: Float!
  total: Float!
}

input PaginationInput {
  page: Float! = 1
  pageSize: Float! = 10
}

type Query {
  currentRoom: ResultUnion_RoomModel_Single
  me: ResultUnion_Me_Single!
  roles: ResultUnion_RoleModel_List!
  rooms(filter: FilterRoomInput, pagination: PaginationInput): ResultUnion_RoomModel_List!
  users(filter: FiltersUserInput, pagination: PaginationInput): ResultUnion_UserModel_List!
}

union ResultUnion_GameModel_Mutation = ErrorOutput | GameModel_Mutation

union ResultUnion_Me_Single = ErrorOutput | Me_Single

union ResultUnion_RoleModel_List = ErrorOutput | RoleModel_List

union ResultUnion_RoomModel_List = ErrorOutput | RoomModel_List

union ResultUnion_RoomModel_Mutation = ErrorOutput | RoomModel_Mutation

union ResultUnion_RoomModel_Single = ErrorOutput | RoomModel_Single

union ResultUnion_RoomPlayerModel_List_Mutation = ErrorOutput | RoomPlayerModel_List_Mutation

union ResultUnion_UserModel_List = ErrorOutput | UserModel_List

union ResultUnion_UserModel_Mutation = ErrorOutput | UserModel_Mutation

union ResultUnion_UserToken_Mutation = ErrorOutput | UserToken_Mutation

type RoleModel {
  description: String!
  enum: Roles!
  id: ID!
  name: String!
  point: Float!
  side: RoleSide!
  status: Status!
}

type RoleModel_List implements BaseResponse {
  data: [RoleModel!]!
  message: String!
  pagination: PaginationData!
  statusCode: HttpCode!
}

enum RoleSide {
  villager
  werewolf
}

enum Roles {
  guard
  hunter
  seer
  villager
  werewolf
  witch
}

type RoomModel {
  id: ID!
  name: String!
  players: [RoomPlayerModel!]!
  rolesConfig: [RoomRoleModel!]!
  status: RoomStatus!
  type: RoomType!
  werewolfQuantity: Float!
}

type RoomModel_List implements BaseResponse {
  data: [RoomModel!]!
  message: String!
  pagination: PaginationData!
  statusCode: HttpCode!
}

type RoomModel_Mutation implements BaseResponse {
  data: RoomModel!
  message: String!
  statusCode: HttpCode!
}

type RoomModel_Single implements BaseResponse {
  data: RoomModel
  message: String!
  statusCode: HttpCode!
}

type RoomPlayerModel {
  id: ID!
  isHost: Boolean!
  user: UserModel
  virtual: String
}

type RoomPlayerModel_List_Mutation implements BaseResponse {
  data: [RoomPlayerModel!]!
  message: String!
  statusCode: HttpCode!
}

type RoomRoleModel {
  id: ID!
  role: RoleModel!
}

enum RoomStatus {
  finished
  playing
  waiting
}

enum RoomType {
  multiplayer
  support
}

enum Status {
  active
  inactive
}

input UpdateRoomInput {
  id: ID!
  name: String!
  rolesConfig: [ID!]!
  werewolfQuantity: Float!
}

input UpdateRoomPlayerInput {
  roomId: ID!
  virtualPlayers: [String!]!
}

type UserModel {
  email: String!
  id: ID!
  username: String!
}

type UserModel_List implements BaseResponse {
  data: [UserModel!]!
  message: String!
  pagination: PaginationData!
  statusCode: HttpCode!
}

type UserModel_Mutation implements BaseResponse {
  data: UserModel!
  message: String!
  statusCode: HttpCode!
}

type UserToken {
  token: String!
}

type UserToken_Mutation implements BaseResponse {
  data: UserToken!
  message: String!
  statusCode: HttpCode!
}