datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  active
  inactive
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  password   String
  email      String?
  avatar     String?
  RoomPlayer RoomPlayer?
}

enum Roles {
  werewolf
  villager
  seer
  guard
  hunter
  witch
}

enum RoleSide {
  werewolf
  villager
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  point       Int
  enum        Roles      @unique
  side        RoleSide   @default(villager)
  status      Status     @default(active)
  RoomRole    RoomRole[]
}

enum RoomStatus {
  waiting
  playing
  finished
}

model RoomRole {
  id     Int  @id @default(autoincrement())
  roomId Int  @map("room_id")
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum RoomType {
  support
  multiplayer
}

model Room {
  id          Int          @id @default(autoincrement())
  name        String
  status      RoomStatus   @default(waiting)
  type        RoomType     @default(multiplayer)
  players     RoomPlayer[]
  rolesConfig RoomRole[]
}

model RoomPlayer {
  id      Int     @id @default(autoincrement())
  isHost  Boolean @default(false) @map("is_host")
  roomId  Int     @map("room_id")
  userId  Int?    @unique @map("user_id")
  virtual String?
  user    User?   @relation(fields: [userId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
