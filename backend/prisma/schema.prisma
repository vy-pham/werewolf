datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  active
  inactive
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  password   String
  email      String?
  avatar     String?
  RoomPlayer RoomPlayer?
  GamePlayer GamePlayer[]
}

enum Roles {
  werewolf
  villager
  seer
  guard
  hunter
  witch
}

enum RoleSide {
  werewolf
  villager
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  point       Int
  enum        Roles        @unique
  side        RoleSide     @default(villager)
  status      Status       @default(active)
  RoomRole    RoomRole[]
  GamePlayer  GamePlayer[]
  RoomPlayer  RoomPlayer[]
}

enum RoomStatus {
  waiting
  playing
  finished
}

model RoomRole {
  id     Int  @id @default(autoincrement())
  roomId Int  @map("room_id")
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum RoomType {
  support
  multiplayer
}

model Room {
  id               Int          @id @default(autoincrement())
  name             String
  status           RoomStatus   @default(waiting)
  type             RoomType     @default(multiplayer)
  players          RoomPlayer[]
  rolesConfig      RoomRole[]
  werewolfQuantity Int          @default(1) @map("werewolf_quantity")
  game             Game[]
}

model RoomPlayer {
  id      Int     @id @default(autoincrement())
  isHost  Boolean @default(false) @map("is_host")
  roomId  Int     @map("room_id")
  roleId  Int?    @map("role_id")
  userId  Int?    @unique @map("user_id")
  virtual String?
  user    User?   @relation(fields: [userId], references: [id])
  role    Role?   @relation(fields: [roleId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum GameStatus {
  waiting
  playing
  end
}

model Game {
  id      Int          @id @default(autoincrement())
  status  GameStatus   @default(waiting)
  roomId  Int          @map("room_id")
  room    Room         @relation(fields: [roomId], references: [id])
  players GamePlayer[]
  rounds  GameRound[]
}

enum GamePlayerStatus {
  alive
  dead
}

model GamePlayer {
  id       Int               @id @default(autoincrement())
  game     Game              @relation(fields: [gameId], references: [id])
  gameId   Int               @map("game_id")
  user     User?             @relation(fields: [userId], references: [id])
  userId   Int?              @map("user_id")
  virtual  String?
  role     Role              @relation(fields: [roleId], references: [id])
  roleId   Int               @map("role_id")
  status   GamePlayerStatus  @default(alive)
  actorOf  GameRoundAction[] @relation("actor")
  targetOf GameRoundAction[] @relation("target")
}

enum GameRoundTime {
  day
  night
}

model GameRound {
  id       Int               @id @default(autoincrement())
  game     Game              @relation(fields: [gameId], references: [id], onDelete: NoAction)
  gameId   Int               @map("game_id")
  sequence Int
  time     GameRoundTime
  actions  GameRoundAction[]
}

enum GameRoundActionTargetStatus {
  alive
  dead
}

model GameRoundAction {
  id           Int                         @id @default(autoincrement())
  gameRound    GameRound                   @relation(fields: [gameRoundId], references: [id])
  gameRoundId  Int                         @map("game_round_id")
  turnOf       Roles                       @map("turn_of")
  actor        GamePlayer?                 @relation(name: "actor", fields: [actorId], references: [id])
  actorId      Int?                        @map("actor_id")
  target       GamePlayer?                 @relation(name: "target", fields: [targetId], references: [id])
  targetId     Int?                        @map("target_id")
  targetStatus GameRoundActionTargetStatus @map("target_status")
}
